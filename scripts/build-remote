#!/bin/bash
#
# (c) Stephen Bates, 2025
#
# A simple script to build a minimal (localmodconfig) kernel based on
# a remote target using the kernel source tree already checked out on
# the local machine. Useful for updating kernels on VMs (for example).
#
# Note that you must call this script from the root of a kernel source
# tree.
#
# Note you can point to a file that contains a specific set of config
# script calls so we can build kernels specific to a given task. We
# store some our favourite such configs in the appropriate folder.
#
# An example usage might be:
#
# REMOTE_NAME=local-test-vm \
#    CONFIG=config-6.8.0-60-generic \
#    CONFIG_SCRIPT=default \
#    LABEL=-example-label ./build-remote
#
# Note you can set REMOTE_NAME=localhost. In this case you will build
# based on any arbitary config file as specified by CONFIG. Note you
# cannot use this in conjunction with WSL_MODE (which assumes
# REMOTE_NAME=localhost).
#
# Note we can set NO_BUILD=true to stop after the clean and setup
# steps. Useful for testing and CI.
#
# Note the WSL_MODE builds for Windows Subsystem for Linux. This does
# not need a REMOTE_NAME as it assumes this is targeting the local
# host. Note that the WSL_MODE needs password-less sudo access in
# order to work.
#
# An example WSL-based usage might be:
#
# WSL_MODE=true CONFIG_SCRIPT=wsl \
#    LABEL=-wsl-based-label ./build-remote

set -e

REMOTE_NAME=${REMOTE_NAME:-none}
CONFIG=${CONFIG:-none}
CONFIG_SCRIPT=${CONFIG_SCRIPT:-none}
LABEL=${LABEL:--build-remote}
NO_BUILD=${NO_BUILD:-false}
WSL_MODE=${WSL_MODE:-false}
WIN_USER=${WIN_USER:-stebates}

# Hardcode ARCH for now.
ARCH=x86

# Hardcode WSL kernel folder and config location for now
WSL_KERNEL_DIR=/mnt/c/wsl-kernels
WSL_CONFIG=/mnt/c/Users/${WIN_USER}/.wslconfig

# Get script path
SCRIPT_DIR=$(cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)

if [ ${WSL_MODE} == "true" ]; then
    echo "INFO: Executing in WSL mode."
    REMOTE_NAME=localhost
    CONFIG=config-wsl
else
    if [ ${REMOTE_NAME} == "none" ]; then
        echo "Error. You must specify a REMOTE_NAME to ssh into."; exit -1
    fi
    if [ ${CONFIG} == "none" ]; then
        echo "Error. You must specify a CONFIG file."; exit -1
    fi
fi

function clean {
    make distclean
    rm -rf linux-*.tar.gz \
       *-lsmod \
       config-* \
       *.vhdx \
       wslconfig-* \
       ${REMOTE_NAME}-${CONFIG}
}

function setup {
    if [ ${WSL_MODE} == "true" ]; then
        cp ./Microsoft/${CONFIG} ${REMOTE_NAME}-${CONFIG}
        lsmod > ${REMOTE_NAME}-${CONFIG}-lsmod
    elif [ ${REMOTE_NAME} == "localhost" ]; then
        if [ ! -f ${CONFIG} ]; then
            echo "Error: localhost CONFIG (${CONFIG}) does not exist."; exit -1
        fi
        cp ${CONFIG} ${REMOTE_NAME}-${CONFIG}
        lsmod > ${REMOTE_NAME}-${CONFIG}-lsmod
    else
        scp -F ${HOME}/.ssh/config \
            ${REMOTE_NAME}:/boot/${CONFIG} ${REMOTE_NAME}-${CONFIG}
        ssh -F ${HOME}/.ssh/config ${REMOTE_NAME} \
            lsmod > ${REMOTE_NAME}-${CONFIG}-lsmod
    fi
    cp ${REMOTE_NAME}-${CONFIG} .config

    scripts/config --disable SYSTEM_TRUSTED_KEYRING
    scripts/config --disable SYSTEM_TRUSTED_KEYS
    scripts/config --disable SYSTEM_REVOCATION_KEYS
    make olddefconfig
    scripts/config --disable GPIO_BT8XX
    scripts/config --module BLK_DEV_NULL_BLK
    make LSMOD=${REMOTE_NAME}-${CONFIG}-lsmod localmodconfig
    ./scripts/config --enable LOCALVERSION_AUTO
    ./scripts/config --set-str LOCALVERSION ${LABEL}

    if [ ${CONFIG_SCRIPT} != "none" ]; then
        echo "INFO: Applying the .config mods in config-${CONFIG_SCRIPT}."
        source ${SCRIPT_DIR}/../config-scripts/config-${CONFIG_SCRIPT}
    fi

    make olddefconfig
}

function build {
    if [ ${WSL_MODE} == "true" ]; then
        time make -j $(nproc)
        MODULES_PATH=./modules-${VERSION}
        time INSTALL_MOD_PATH=${MODULES_PATH} make -j $(nproc) \
             modules_install
        sudo ./Microsoft/scripts/gen_modules_vhdx.sh \
             ${MODULES_PATH} \
             ${VERSION} \
             modules-${VERSION}.vhdx &> /dev/null
        sudo chown $(id -u):$(id -g) modules-${VERSION}.vhdx
        rm -rf ${MODULES_PATH}
    else
        time make -j $(nproc) targz-pkg
    fi
}

function install {
    if [ ${WSL_MODE} == "true" ]; then
        echo "INSTALL: Installing via WSL_MODE (${VERSION})."
        cp ./arch/${ARCH}/boot/bzImage ${WSL_KERNEL_DIR}/bzImage-${VERSION}
        cp modules-${VERSION}.vhdx ${WSL_KERNEL_DIR}/modules/
        WIN_KERNEL_DIR=$(wslpath  -w ${WSL_KERNEL_DIR} | sed s/\\\\/\\\\\\\\\/g)
        cat <<- EOF > wslconfig-${VERSION}
	[wsl2]
	kernel=${WIN_KERNEL_DIR}\\\bzImage-${VERSION}
	kernelModules=${WIN_KERNEL_DIR}\\\modules\\\modules-${VERSION}.vhdx
	kernelCommandLine=
	EOF
        cp ${WSL_CONFIG} ${WSL_CONFIG}.backup
        cp wslconfig-${VERSION} ${WSL_CONFIG}
    elif [ ${REMOTE_NAME} == "localhost" ]; then
        echo "INSTALL: Installing with REMOTE=localhost (${VERSION})."
        echo "  INSTALL: In localhost mode do nothing for install (for now)."
    else
        TARBALL=$(ls linux-*.tar.gz)
        echo "INSTALL: Installing ${TARBALL} (${VERSION}) on ${REMOTE_NAME}."
        scp -F ${HOME}/.ssh/config ${TARBALL} ${REMOTE_NAME}:/tmp/
        ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
            "sudo tar -C / --exclude=vmlinux-* -xhvf /tmp/${TARBALL}"
        ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
            "sudo update-initramfs -c -k ${VERSION}"
        ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
            "sudo update-grub"
        ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
            "sudo linux-update-symlinks install ${VERSION} /boot/vmlinuz-${VERSION}"
        ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
            "sudo reboot now"
    fi
}

clean
setup
  # Need to get kernelrelease
make -j $(nproc) modules_prepare
VERSION=$(make -s kernelrelease)
if [ ${NO_BUILD} == "true" ]; then
    echo "INFO. User requested we stop after setup. Exiting."
    exit 0
fi
build
install
