#!/bin/bash
#
# (c) Stephen Bates, 2025
#
# A simple script to build a minimal (localmodconfig) kernel based on
# a remote target using the kernel source tree already checked out on
# the local machine. Useful for updating kernels on VMs (for example).
#
# Note that you must call this script from the root of a kernel source
# tree.

set -e

REMOTE_NAME=${REMOTE_NAME:-none}
CONFIG=${CONFIG:-none}
LABEL=${LABEL:--build-remote}

# Hardcode ARCH for now.
ARCH=x86

if [ ${REMOTE_NAME} == "none" ]; then
    echo "Error. You must specify a REMOTE_NAME to ssh into."; exit -1
fi
if [ ${CONFIG} == "none" ]; then
    echo "Error. You must specify a CONFIG file."; exit -1
fi

function clean {
    make distclean
    rm -rf linux-*.tar.gz \
       *-lsmod \
       config-* \
       ${REMOTE_NAME}-${CONFIG}
}

function setup {
    scp -F ${HOME}/.ssh/config \
        ${REMOTE_NAME}:/boot/${CONFIG} ${REMOTE_NAME}-${CONFIG}
    cp ${REMOTE_NAME}-${CONFIG} .config
    ssh -F ${HOME}/.ssh/config ${REMOTE_NAME} \
        lsmod > ${REMOTE_NAME}-${CONFIG}-lsmod
    scripts/config --disable SYSTEM_TRUSTED_KEYRING
    scripts/config --disable SYSTEM_TRUSTED_KEYS
    scripts/config --disable SYSTEM_REVOCATION_KEYS
    make olddefconfig
    scripts/config --disable GPIO_BT8XX
    make LSMOD=${REMOTE_NAME}-${CONFIG}-lsmod localmodconfig
    ./scripts/config --enable LOCALVERSION_AUTO
    ./scripts/config --set-str LOCALVERSION ${LABEL}
    ./scripts/config -m INFINIBAND
    ./scripts/config --enable INFINIBAND_ADDR_TRANS
    ./scripts/config -m BLK_DEV_NVME
    ./scripts/config -m NVME_TARGET
    ./scripts/config -m NVME_KEYRING
    ./scripts/config -m NVME_AUTH
    ./scripts/config -m NVME_CORE
    ./scripts/config --enable NVME_MULTIPATH
    ./scripts/config --enable NVME_HWMON
    ./scripts/config -m NVME_FABRICS
    ./scripts/config -m NVME_RDMA
    ./scripts/config -m NVME_TCP
    ./scripts/config --enable NVME_TCP_TLS
    ./scripts/config --enable NVME_HOST_AUTH
    ./scripts/config --enable NVME_TARGET_PASSTHRU
    ./scripts/config -m NVME_TARGET_LOOP
    ./scripts/config -m NVME_TARGET_RDMA
    ./scripts/config -m NVME_TARGET_TCP
    ./scripts/config --enable NVME_TARGET_TCP_TLS
    ./scripts/config --enable NVME_TARGET_AUTH
    ./scripts/config -m NET_9P
    ./scripts/config -m NET_9P_FD
    ./scripts/config -m NET_9P_VIRTIO
    ./scripts/config -m 9P_FS
    ./scripts/config --enable 9P_FSCACHE
    ./scripts/config --enable 9P_FS_POSIX_ACL
    ./scripts/config --enable 9P_FS_SECURITY
    make olddefconfig
}

function build {
    time make -j $(nproc) targz-pkg
}

function install {
    TARBALL=$(ls linux-*.tar.gz)
    VERSION=$(ls linux-*.tar.gz | sed -E "s/(linux-)(.*)-${ARCH}.tar.gz/\2/")
    echo "INSTALL: Installing ${TARBALL} (${VERSION}) on ${REMOTE_NAME}."
    scp -F ${HOME}/.ssh/config ${TARBALL} ${REMOTE_NAME}:/tmp/
    ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
        "sudo tar -C / --exclude=vmlinux-* -xhvf /tmp/${TARBALL}"
    ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
        "sudo update-initramfs -c -k ${VERSION}"
    ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
        "sudo update-grub"
    ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
        "sudo linux-update-symlinks install ${VERSION} /boot/vmlinuz-${VERSION}"
    ssh -F ${HOME}/.ssh/config -t -t ${REMOTE_NAME} \
        "sudo reboot now"
}

clean
setup
build
install
