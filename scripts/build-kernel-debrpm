#!/bin/bash
#
# (c) Stephen Bates, Eideticom 2018
#
# A simple script to build linux kernel image, header and source
# Debian packages (.deb) or RHEL/CentOS packages (.rpm) for a specific
# kernel and configuration.
#
# Note that by default this will be a stable kernel with default
# config options for the ARCH of the host machine. To build for
# another ARCH set the ARCH and CROSS_COMPILE inputs appropriately. 
#
# An example call to this script that builds a working p2pmem kernel
# (only on AMD or x86_64) is as follows:
#
# REMOTE=https://github.com/sbates130272/linux-p2pmem \
#   REMOTE_BRANCH=pci-p2p-v4 \
#   CONFIG=build-kernel-deb-p2pconfig \  
#   ./build-kernel-debrpm
#
# You can build a monolithic kernel by calling with MONO=yes. You can
# patch the kernel prior to build by calling with
# PATCH=<patch-file>. The patchfile is applied via cat <patch-file> |
# patch -p1. You can pass a directory into the PATCH variable in which
# case all .patch files in that folder are applied.
#
# N.B. Aspects of this script might not work on very old or new
# kernels. Seems to to work fine on kernels in the 4.x range.

set -e

WORKDIR=${WORKDIR:-.build-kernel-debrpm-work}
REMOTE=${REMOTE:-git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git}
REMOTE_BRANCH=${REMOTE_BRANCH:-v4.14.49}
CONFIG=${CONFIG:-}
PATCH=${PATCH:-}
THREADS=${THREADS:-8}
DEBUG=${DEBUG:-no}
MONO=${MONO:-no}
DISTCC=${DISTCC:-no}
ICECC=${ICECC:-no}
ARCH=${ARCH:-}
CROSS_COMPILE=${CROSS_COMPILE:-}
DEB=${DEB:-yes}

CURDIR=$(pwd)

# Can't do both DISTCC and ICECC!

if [ $DISTCC == "yes" ] && [ $ICECC == "yes" ]; then
    echo "You cannot set both DISTCC and ICECC!"
    exit 1
fi

# If requested, setup for a cross compile

if [ ! -z $ARCH ]; then
    export ARCH=${ARCH}
    export CROSS_COMPILE=${CROSS_COMPILE}
fi;

function cleanup() {
    rm -rf ../linux-${1}*.tar.gz \
       ../linux-${1}*.diff.gz \
       ../linux-headers-${1}*.deb \
       ../linux-libc-dev_${1}*.deb \
       ../linux-image-${1}*.deb \
       ../linux-${1}*.dsc \
       ../linux-${1}*.changes \
       ../linux-${1}*.buildinfo
}

  # Perform a shallow (depth 1) clone of the target kernel repo into
  # the work folder. Best to use a temp folder for this.

git clone --depth 1 $REMOTE -b $REMOTE_BRANCH $WORKDIR/kernel
cd $WORKDIR/kernel

  # Apply a patch file if one exists. If PATCH is a directory we apply
  # all the *.patch files in that folder.

function patchdir() {
    for file in $(find $1 -name "*.patch" | sort -n) ; do
	echo Applying patch-file $file.
	cat $file | patch -p1 -l
    done
}

if [ ! -z $PATCH ]; then
    if [[ -d $CURDIR/$PATCH ]]; then
	patchdir $CURDIR/$PATCH
    else
	echo "Applying patch-file $CURDIR/${PATCH}."
	cat $CURDIR/$PATCH | patch -p1
    fi
fi

  # If requested copy in the specified .config to use as a start
  # point. If none is specified then we just run a make defconfig.

if [ ! -z $CONFIG ]; then
    cp $CURDIR/$CONFIG .config
    make olddefconfig
else
    make defconfig
fi

  # By default, disable debug information since this increases the
  # build time hugely.

if [ $DEBUG != "yes" ]; then
    scripts/config --disable DEBUG_INFO
fi

  # If a monolithic kernel (i.e. no modules, all built in) is
  # requested then run make localyesconfig. Note this results in a
  # much bigger image file but no need for modules.

if [ $MONO == "yes" ]; then
    make localyesconfig
fi

  # Now build the kernel and construct the debian or RPM packages. Use
  # distcc if requested. In the case of RPM pass in RPM opts to use
  # the current folder as the parent for rpmbuild folder.

if [ $DEB == "yes" ]; then
    TARGET=deb-pkg
else
    TARGET=rpm-pkg
fi

if [ $DISTCC == "yes" ]; then
    distcc-pump make RPMOPTS="--define \"_topdir `pwd`/rpmbuild\"" -j $THREADS CC=distcc $TARGET
elif [ $ICECC == "yes" ]; then
    make RPMOPTS="--define \"_topdir `pwd`/rpmbuild\"" -j $THREADS CC="icecc cc" $TARGET
else
    make RPMOPTS="--define \"_topdir `pwd`/rpmbuild\"" -j $THREADS $TARGET
fi

VERSION=$(make -s kernelversion)
TIME=$(date +"%m%d%Y-%H%M%S")
cat > .build-info << EOF
  remote:    ${REMOTE}
  branch:    ${REMOTE_BRANCH}
  commit:    $(git rev-parse HEAD)
  patch(es): ${PATCH}
  deb:       ${DEB}
EOF

FILES=(.config .build-info)
if [ ! -z $PATCH ]; then
    if [[ -d $CURDIR/$PATCH ]]; then
	for file in $(find $CURDIR/$PATCH -name "*.patch") ; do
	    FILES+=($file)
	done
    else
	FILES+=(${CURDIR}/$PATCH)
    fi
fi

if [ $DEB == "yes" ]; then

    # By default (and this seems hard to change) the deb-pkg make target
    # generates the files in parent folder. We grab the kernel version
    # number to assist in collecting these files into one tarball. We
    # add the .config for reference as well as the remote, branch and
    # commit SHA used.


    tar cvfz ${CURDIR}/build-kernel-deb.${TIME}.tar.gz \
	../linux-headers-${VERSION}*.deb \
	../linux-image-${VERSION}*.deb \
	${FILES[*]}

else

    if [ -z $ARCH ]; then
	ARCH=$(lscpu | head -n 1 | awk '{print $2}')
    fi

    tar cvfz ${CURDIR}/build-kernel-rpm.${TIME}.tar.gz \
	./rpmbuild/RPMS/${ARCH}/kernel-*.rpm \
	kernel.spec \
	${FILES[*]}

fi

  # Cleanup

cleanup ${VERSION}
cd $CURDIR
rm -rf ${WORKDIR}
