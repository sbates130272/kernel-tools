#!/bin/bash
#
# (c) Stephen Bates, Raithlin Consulting 2017
#
# A simple script to build a linux kernel and associated modules for
# the Broadcom Stingray, Mellanox BlueWhale and other ARM64 systems.
#
# Notes from Logan
# ----------------
# export ARM64
# export CROSS_COMPILE=/home/batesste/stingray/poky/build/tmp/sysroots/\
#	x86_64-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux-
# make -j 16
# make INSTALL_MOD_PATH=./myroot modules_install
#
#
# Then it's a mater of scping the stuff to the arm host.
#
# The first thing I'd do is write a quick script to make it all easy for
# you. Make sure the arm hosts mounts the boot partition by adding it to
# its fstab file -- as I remember it didn't do that (a standard place
# would be to mount this in /boot). Then just the make commands followed
# by a couple scp commands for the kernel and modules in a quick shell
# script that you can run.
#
# Note that this script is targetting for just the kernel (not the
# user-space code or rootfs) and is intended to be called from the
# top-level folder of a the linux kernel source tree.
#
# Note that the exact way you call this script will depend on your
# system setup. As an example this has worked for me in the past:
#
# CROSSDIR=/home/batesste/stingray-ea3/poky/build/tmp/work/bcm958742t-poky-linux/\
# brcm-linux/0.0.0-brcm-nxs_1.0_ea3-RC4-r0/recipe-sysroot-native/usr/bin/\
# aarch64-poky-linux CONFIG=../configs/.config-stingray-ea3 \
# ../build-stingray
#
# Also note that for our current setup we access the rootfs via the
# following command
#
# sudo mount /dev/mmcblk1p1 /mnt/mmcblk1p1
#
# but we could auto-mount this via fstab so we can just scp files over
# and reboot...

  # Setup some script variables that can (optionally) be over-written
  # by the script caller.

CONFIG=${CONFIG:-.config}
CROSSTOOLS=${CROSSTOOLS:-aarch64-linux-gnu-}
MODULEDIR=${MODULEDIR:-../modules-arm64}
HEADERDIR=${HEADERDIR:-../headers-arm64}
OUTPUTDIR=${OUTPUTDIR:-../output-arm64}
TARGET_HOST=${TARGET_HOST:-none}
CLEAN=${CLEAN:-no}
THREADS=${THREADS:-16}

TIME=$(date +"%m%d%Y-%H%M%S")

  # Input argument check

#if [ ! -x "${CROSSTOOLS}gcc" ]; then
#   echo "Error: ${CROSSTOOLS} compile tools do not appear to exist."
#   exit -1
#fi

  # Now run the build process. We also copy the .config somewhere safe
  # with a timestamp added so we have it.

export CROSS_COMPILE=${CROSSTOOLS}
export ARCH=arm64

rm -rf ${MODULEDIR}
if [ $CLEAN != "no" ]; then
    make clean
fi
cp $CONFIG .config
make oldconfig
cp .config ../.config-$TIME
make -j $THREADS
make INSTALL_MOD_PATH=$MODULEDIR modules_install
make INSTALL_HDR_PATH=$HEADERDIR headers_install

  # Prep the two things we need to move. The Image file and a tarball
  # of the kernel modules.

mkdir -p ${OUTPUTDIR}-${TIME}
cp .config ${OUTPUTDIR}-${TIME}/.config-$TIME
cp arch/arm64/boot/Image ${OUTPUTDIR}-${TIME}/Image-$TIME
cd ${MODULEDIR}/lib/modules
tar cvfz modules.tar.gz --exclude=modules.tar.gz *
cd -
cp ${MODULEDIR}/lib/modules/modules.tar.gz ${OUTPUTDIR}-${TIME}/modules-$TIME.tar.gz
tar cvfz headers.tar.gz ${HEADERDIR}
cp headers.tar.gz ${OUTPUTDIR}-${TIME}/headers-$TIME.tar.gz
rm -rf ${MODULEDIR} ${HEADERDIR}

# Ideally we will add the ability to install the kernel we just built
# on the arm64 machine. For now here are some instructions for the
# BRCM stingray card we have.
#
# 1. Mount the partition with the kernel images:
#      mount /dev/mmcblk0p1 /mnt/mmcblk0p1
#
# 2. Move the new Image file over:
#      mv /mnt/mmcblk0p1/Image /mnt/mmcblk0p1/Image.last
#      mv <image name> /mnt/mmcblk0p1/Image
#      umount /mnt/mmcblk0p1/
#
# 3. Install the modules:
#      cd /lib/modules
#      cp <tarball of modules> .
#      tar xvfz <tarball of modules>
#
# 4. Install the headers (only needed if compiling kernel modules):
#      cd /usr/src
#      cp <tarball of headers> .
#      tar xvfz <tarball of headers>
#      cd /lib/modules/<name of new kernel>
#      ln -s build /usr/src/<name of new kernel>
#      ln -s source /usr/src/<name of new kernel>

if [ $TARGET_HOST != "none" ]; then
    echo "TBD: scp kernel and modules to target host!"
fi
